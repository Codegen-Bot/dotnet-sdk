type Configuration {
    """
    All community bots have an ID which starts with `bot://hub/`. Here are some examples of bot IDs being used:
    
    ```
    # To use a bot to generate code:
    bot install bot://hub/dotnet/botfactory
    # When building a custom bot, add a dependency on another bot:
    bot add bot://hub/statesmith
    ```
    
    Tips for choosing a bot ID:
    
    - If the bot generates source code in a specific language or VM, it should have that in the URL.
      E.g. the `/dotnet/` in the bot ID `bot://hub/dotnet/botfactory` implies the bot generates code
      relevant only to the Microsoft .NET platform.
    - Some bots generate code in multiple languages; these shouldn't have a specific language or VM
      in their ID.
    - Choose a bot ID that starts with bot://hub/. Other bot ID prefixes, like bot://core/,
      are reserved for future Codegen Bot releases.
    - Bot IDs are usually lower case
    - If the bot is for generated a specific file name or file extension, that can be included in the bot ID.
    """
    id: String!
    """
    The directory that will contain the C# project
    """
    outputPath: String!
    """
    The name of the C# project (the project file will be this plus `.csproj`)
    """
    projectName: String!
    """
    If true, generates a minimal working example. Great for learning how to build bots!
    If false or null, includes a few nice tidbits for making bots a little easier in the long run.
    """
    minimalWorkingExample: Boolean!
    """
    If true, excludes the bits for building without docker.
    If this is false or null then those bits are included.
    """
    buildWithoutDocker: Boolean
    """
    The version of .NET to use in this bot. Currently the only supported value is just '8'.
    As future versions of .NET are released and we add support for them, this value will become
    important.
    """
    dotnetVersion: String!
    copybots: [DotnetCopybot!]
}

type DotnetCopybot
{
    name: String!
    inputDirectory: String!
    whitelist: [String!]!
    searchAndReplace: [DotnetCopybotSearchReplace!]
}

type DotnetCopybotSearchReplace {
    needle: String!
    replacement: String!
    variants: [DotnetCopybotSearchReplaceVariant!]
}

enum DotnetCopybotSearchReplaceVariant
{
    CamelCase,
    SnakeCase,
    KebabCase,
    LowerCase,
    UpperCase,
}