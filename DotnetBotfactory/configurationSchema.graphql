"""
This is a special type. A non-nullable field of this type called "configuration" will be
inserted in the query root type, so that this bot can access its configuration values.

This is where we put all configuration settings that are needed by this bot.
This file can contain any number of types, but it is best to keep configuration simple
and prefer convention over configuration. That helps keep bots easy to use, focused,
and easy to refactor.
"""
type Configuration {
    """
    All community bots have an ID which starts with `bot://hub/`. Here are some examples of bot IDs being used:

    ```
    # To use a bot to generate code:
    bot install bot://hub/dotnet/botfactory
    # When building a custom bot, add a dependency on another bot:
    bot add bot://hub/statesmith
    ```

    Tips for choosing a bot ID:

    - If the bot generates source code in a specific language or VM, it should have that in the URL.
    E.g. the `/dotnet/` in the bot ID `bot://hub/dotnet/botfactory` implies the bot generates code
    relevant only to the Microsoft .NET platform.
    - Some bots generate code in multiple languages; these shouldn't have a specific language or VM
    in their ID.
    - Choose a bot ID that starts with bot://hub/. Other bot ID prefixes, like bot://core/,
    are reserved for future Codegen Bot releases.
    - Bot IDs are usually lower case
    - If the bot is for generated a specific file name or file extension, that can be included in the bot ID.
    """
    id: String!
    """
    The programming language the bot will be written in
    """
    language: DotnetLanguage!
    """
    The directory that will contain the C# project
    """
    outputPath: String!
    """
    The name of the C# project (the project file will be this plus `.csproj`)
    """
    projectName: String!
    """
    If true, generates a minimal working example. Great for learning how to build bots!
    If false or null, includes a few nice tidbits for making bots a little easier in the long run.
    """
    minimalWorkingExample: Boolean!
    """
    If true, the new bot will provide a new GraphQL API, which can be consumed by bots that depend
    on the new bot.
    """
    provideApi: Boolean!
    """
    The version of .NET to use in this bot. Currently the only supported value is just '8'.
    As future versions of .NET are released and we add support for them, this value will become
    important.
    """
    dotnetVersion: DotnetVersion!
    """
    Copybots are minibots that are generated off existing files. They output the content of those existing files.
    Copybots are a useful way to convert existing code or scaffolding tools into a bot.
    Each copybot can produce multiple files.
    """
    copybots: [DotnetCopybot!]!
}

enum DotnetLanguage {
    CSHARP,
    RUST,
    TYPESCRIPT,
    GO,
    KOTLIN,
}

enum DotnetVersion {
    DotNet8
}

type DotnetCopybot
{
    """
    The name of the minibot. This minibot may produce multiple files.
    """
    name: String!
    """
    The directory that contains the files that will be generated by this copybot.
  """
  inputDirectory: String!
  """
  If a file matches a pattern in this whitelist, then it will be included in the minibot.
  """
  whitelist: [String!]!
  """
  A list of fields that will be included in the configuration for this bot, and will be used by this minibot to
  make the output of the minibot be parameterized. You can use this to change the name of files and contents of files.
  """
  fieldDefinitions: [DotnetCopybotFieldDefinition!]!
}

type DotnetCopybotFieldDefinition {
  """
  The string to search for
  """
  needle: String!
  """
  The name of the field to be used in the bot's configuration
  """
  fieldName: String!
  """
  The variants of the string to search for (i.e. UPPER CASE, snake-case, etc.)
  """
  variants: [DotnetCopybotStringVariant!]
}

enum DotnetCopybotStringVariant
{
  CamelCase,
  SnakeCase,
  UpperSnakeCase,
  LowerSnakeCase,
  KebabCase,
  UpperKebabCase,
  LowerKebabCase,
  LowerCase,
  UpperCase,
}