schema {
  query: Query
  mutation: Mutation
}

interface GraphQLSelection @source(name: "GraphQLSelection", schema: "graphql") {
  name: String!
}

type BotSpec @source(name: "BotSpec", schema: "schema") {
  unparse: String!
  readMePath: String
  configurationSchemaPath: String
  stitchSchemaPath: String
  consumedSchemaPath: String
  excludeConfigurationFromConsumedSchema: Boolean
  dependencies: [KeyValuePairOfStringAndString!]!
  providedSchemaPath: String
  tags: [KeyValuePairOfStringAndString!]
  private: Boolean
  exec: [KeyValuePairOfStringAndString!]
}

type Caret @source(name: "Caret", schema: "output") {
  separator: String!
  string: String!
  tags: [CaretTag!]!
  tagValue(tagName: String!): String
  matches(tags: [CaretTagInput!]!): Boolean!
  id: String!
}

type CaretTag @source(name: "CaretTag", schema: "output") {
  name: String!
  value: String!
}

"This is a special type. A non-nullable field of this type called \"configuration\" will be\ninserted in the query root type, so that this bot can access its configuration values.\n\nThis is where we put all configuration settings that are needed by this bot.\nThis file can contain any number of types, but it is best to keep configuration simple\nand prefer convention over configuration. That helps keep bots easy to use, focused,\nand easy to refactor."
type Configuration @source(name: "Configuration", schema: "Configuration") {
  "It's best to add documentation strings for your fields, because they are displayed\nwhen codegen.bot prompts the bot user for each value."
  outputPath: String!
}

type File @source(name: "File", schema: "filesystem") {
  path: String!
  kind: FileKind!
}

type GraphQLArgument @source(name: "GraphQLArgument", schema: "graphql") {
  name: String!
  type: TypeRef!
  directives: [GraphQLDirective!]!
  value: String
}

type GraphQLDirective @source(name: "GraphQLDirective", schema: "graphql") {
  name: String!
  arguments: [GraphQLDirectiveArgument!]!
}

type GraphQLDirectiveArgument @source(name: "GraphQLDirectiveArgument", schema: "graphql") {
  name: String!
  value: String!
}

type GraphQLDirectiveType @source(name: "GraphQLDirectiveType", schema: "graphql") {
  name: String!
  arguments: [GraphQLArgument!]!
  isRepeatable: Boolean!
}

type GraphQLEnumeration @source(name: "GraphQLEnumeration", schema: "graphql") {
  name: String!
  directives: [GraphQLDirective!]!
  values: [GraphQLEnumerationValue!]!
}

type GraphQLEnumerationValue @source(name: "GraphQLEnumerationValue", schema: "graphql") {
  name: String!
  directives: [GraphQLDirective!]!
}

type GraphQLField @source(name: "GraphQLField", schema: "graphql") {
  name: String!
  type: TypeRef!
  arguments: [GraphQLArgument!]!
  directives: [GraphQLDirective!]!
  description: String
}

type GraphQLFieldSelection implements GraphQLSelection @source(name: "GraphQLFieldSelection", schema: "graphql") {
  name: String!
  alias: String
  selections: [GraphQLSelection!]!
  fieldSelections: [GraphQLFieldSelection!]!
  fragmentSpreadSelections: [GraphQLFragmentSpreadSelection!]!
  directives: [GraphQLDirective!]!
}

type GraphQLFragment @source(name: "GraphQLFragment", schema: "graphql") {
  name: String!
  typeCondition: String!
  variables: [GraphQLVariable!]!
  selections: [GraphQLSelection!]!
  fieldSelections: [GraphQLFieldSelection!]!
  fragmentSpreadSelections: [GraphQLFragmentSpreadSelection!]!
  directives: [GraphQLDirective!]!
}

type GraphQLFragmentSpreadSelection implements GraphQLSelection @source(name: "GraphQLFragmentSpreadSelection", schema: "graphql") {
  name: String!
}

type GraphQLInputField @source(name: "GraphQLInputField", schema: "graphql") {
  name: String!
  type: TypeRef!
  arguments: [GraphQLArgument!]!
  directives: [GraphQLDirective!]!
  value: String
}

type GraphQLInputObjectType @source(name: "GraphQLInputObjectType", schema: "graphql") {
  name: String!
  fields: [GraphQLInputField!]!
  directives: [GraphQLDirective!]!
}

type GraphQLInterfaceType @source(name: "GraphQLInterfaceType", schema: "graphql") {
  name: String!
  fields: [GraphQLField!]!
  directives: [GraphQLDirective!]!
}

type GraphQLMetadata @source(name: "GraphQLMetadata", schema: "graphql") {
  operations: [GraphQLOperation!]!
  objectTypes: [GraphQLObjectType!]!
  inputObjectTypes: [GraphQLInputObjectType!]!
  interfaceTypes: [GraphQLInterfaceType!]!
  scalarTypes: [GraphQLScalarType!]!
  fragments: [GraphQLFragment!]!
  directives: [GraphQLDirectiveType!]!
  enumerations: [GraphQLEnumeration!]!
}

type GraphQLObjectType @source(name: "GraphQLObjectType", schema: "graphql") {
  name: String!
  fields: [GraphQLField!]!
  directives: [GraphQLDirective!]!
}

type GraphQLOperation @source(name: "GraphQLOperation", schema: "graphql") {
  name: String
  text: String!
  operationType: GraphQLOperationType!
  selections: [GraphQLSelection!]!
  fieldSelections: [GraphQLFieldSelection!]!
  fragmentSpreadSelections: [GraphQLFragmentSpreadSelection!]!
  directives: [GraphQLDirective!]!
  variables: [GraphQLVariable!]!
}

type GraphQLScalarType @source(name: "GraphQLScalarType", schema: "graphql") {
  name: String!
  directives: [GraphQLDirective!]!
}

type GraphQLVariable @source(name: "GraphQLVariable", schema: "graphql") {
  name: String!
  type: TypeRef!
  directives: [GraphQLDirective!]!
  value: String
}

type KeyValuePairOfStringAndString @source(name: "KeyValuePairOfStringAndString", schema: "schema") {
  key: String!
  value: String!
}

type Mutation {
  noop: String
  getOrAddCaret(caretId: String! tags: [CaretTagInput!]! indentation: String! separator: String!): Caret! @delegate(schema: "output", path: "getOrAddCaret")
  addFile(filePath: String! textAndCarets: String! caretDelimiterLength: Int! = 9): Caret! @delegate(schema: "output", path: "addFile")
  addKeyedText(caretId: String! key: String! textAndCarets: String! caretDelimiterLength: Int! = 9): Caret! @delegate(schema: "output", path: "addKeyedText")
  addText(caretId: String! textAndCarets: String! caretDelimiterLength: Int! = 9): Caret! @delegate(schema: "output", path: "addText")
  addKeyedTextByTags(tags: [CaretTagInput!]! key: String! textAndCarets: String! caretDelimiterLength: Int! = 9): [Caret!]! @delegate(schema: "output", path: "addKeyedTextByTags")
  addTextByTags(tags: [CaretTagInput!] textAndCarets: String! caretDelimiterLength: Int! = 9): [Caret!]! @delegate(schema: "output", path: "addTextByTags")
  log(severity: LogSeverity! message: String! arguments: [String!]): String! @delegate(schema: "log", path: "log")
}

type Query {
  noop: String
  botSpec(botFilePath: String!): BotSpec @delegate(schema: "schema", path: "botSpec")
  botSchema(botFilePath: String!): String @delegate(schema: "schema", path: "botSchema")
  hypotheticalBotSchema(configurationSchema: String dependencies: [BotDependencyInput!]! deduplicateConfigurationSchema: Boolean!): String @delegate(schema: "schema", path: "hypotheticalBotSchema")
  randomUuid(seed: Int): String! @delegate(schema: "random", path: "randomUuid")
  randomDouble(seed: Int): Float! @delegate(schema: "random", path: "randomDouble")
  randomSingle(seed: Int): Float! @delegate(schema: "random", path: "randomSingle")
  randomBytes(seed: Int byteCount: Int!): String! @delegate(schema: "random", path: "randomBytes")
  caret(caretId: String!): Caret @delegate(schema: "output", path: "caret")
  carets(tags: [CaretTagInput!]!): [Caret!]! @delegate(schema: "output", path: "carets")
  readTextFile(textFilePath: String! fileVersion: FileVersion): String @delegate(schema: "filesystem", path: "readTextFile")
  files(whitelist: [String!] blacklist: [String!]): [File!]! @delegate(schema: "filesystem", path: "files")
  logNoop: Boolean! @delegate(schema: "log", path: "logNoop")
  markAsReady(processId: Int!): Boolean! @delegate(schema: "readiness", path: "markAsReady")
  "Reads high-level information about things defined in GraphQL files"
  graphQL(fileWhitelist: [String!] additionalFiles: [AdditionalFileInput!]!): GraphQLMetadata! @delegate(schema: "graphql", path: "graphQL")
  configuration: Configuration! @delegate(schema: "Configuration", path: "configuration")
}

type TypeRef @source(name: "TypeRef", schema: "graphql") {
  name: String!
  genericArguments: [TypeRef!]!
  text: String!
}

input AdditionalFileInput @source(name: "AdditionalFileInput", schema: "graphql") {
  filePath: String!
  content: String!
}

input BotDependencyInput @source(name: "BotDependencyInput", schema: "schema") {
  botId: String!
  botVersion: String!
}

input CaretTagInput @source(name: "CaretTagInput", schema: "output") {
  name: String!
  value: String!
}

enum FileKind @source(name: "FileKind", schema: "filesystem") {
  BINARY
  TEXT
}

enum FileVersion @source(name: "FileVersion", schema: "filesystem") {
  GENERATED
  HEAD
}

enum GraphQLOperationType @source(name: "GraphQLOperationType", schema: "graphql") {
  QUERY
  MUTATION
  SUBSCRIPTION
}

enum LogSeverity @source(name: "LogSeverity", schema: "log") {
  TRACE
  DEBUG
  INFORMATION
  WARNING
  ERROR
  CRITICAL
}

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: String!) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: String! "The name of the schema to which this type belongs to." schema: String!) repeatable on OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION